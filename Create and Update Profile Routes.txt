------------------------------
CREATE OR UPDATE PROFILE ROUTES
---------------------------------


-----------------------
PREREQUISITE
----------------
- Get Current User Profile
- import express-validator



------------------------------
FOLDER: routes/api/profile.js
------------------------------
const { check, validatorResult } = require('express-validator/check');
const Profile = require('../../models/Profile);
const User = require('../../models/User');


// @route GET api/profile/me
// @desc Get current users profile
// @access Private

router.get('/me', auth, async (req, res) => {
 try {
  const profile = await Profile.findOne({ user: req.user.id }).populate(
 'user',
  ['name', 'avatar']
);

 if (!profile) {
  return res.status(400).json({ msg: 'There is no profile for this user' });
}

  res.json(profile);
} catch (err){
  console.error(err.message);
  res.status(500).send('Server Error');
}
});



// @route POST api/profile/
// @desc Create or Update User Profile
// @access Private

router.post('/', [auth, [
 check('status', 'Status is required').not().isEmpty(),
 check('skills', 'Skills is required').not().isEmpty().
 check()
]], async (req, res) => {

 const error = validationResult(req);
 if(!errors.isEmpty()){
  return res.status(400).json({ errors: errors.array() });
}

 const {
  company,
  website,
  location,
  bio,
  status,
  githubusername,
  skills,
  youtube,
  facebook,
  twitter,
  instagram,
  linkedln 
} = req.body;

  // Build Profile Object
  const profileFields = {};
  profileFields.user = req.user.id;
  if (company) profileFields.company = company;
   if (website) profileFields.website = website;
   if (location) profileFields.location = location;
    if (bio) profileFields.bio = bio;
    if (status) profileFields.status = status;
    if (githubusername) profileFields.githubusername = githubusername;
    if (skills) profileFields.skills = skills.split(',').map(skill => skill.trim());


  // Build Social object
  profileFields.social ={};
  if (youtube) profileFields.social.youtube = youtube;
   if (twitter) profileFields.social.twitter = twitter;
   if (facebook) profileFields.social.faebook = facebook;
    if (linkedln) profileFields.social.linkedln = linkedln;
    if (instagram) profileFields.social.instagram = instagram;
   
 try {
  let profile = await Profile.findOne({ user: req.user.id });

  if(profile) {
   //Update profile
   profile = await Profile.findOneandUpdate(
 { user: req.user.id },
 { $set: profileFields },
 { new: true });

 return res.json(profile);
}

 // Create a new profile
 profile =  new Profile(profileFields);
 await p rofile.save();
 res.json(profile);


} catch (err){
   console.error(err.message);
   res.status(500).send('Server Error')
}

 res.send('Hello');
  

});


 module.exports = router; 