--------------------------------
USER AUTHENTICATION LOGIN ROUTE
---------------------------------
In this topic we will create a User authentication login


---------------
PREREQUISITE
---------------
- Custom Auth Middleware and JWT





---------------------------
FOLDER: routes/api/auth.js
---------------------------

const jwt = require('jsonwebtoken');
const config = require('config');
const auth = require('../../middleware/auth');
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const { check, validationResult } = 
require('express-validator/check');


// Call your mongoose model e.g We 
// called User model below
const User = require('../../models/User');

// @route         GET api/auth
// @description   GET route
// @access        Public

router.get('/', auth, async (req, res) => {
 try {
  const user = await User.findById(req.user.id).select('-password');
  res.json(user);
} catch(err) {
   console.error(err.message);
   res.status(500).send('Server Error');
}



// @route         POST api/auth
// @description   Authenticate user & get token
// @access        Public

router.post('/', [ 
 check('email', 'Please include a valid email').isEmail(),

check('password', 'Password is required').exists()], 
async (req, res) => {
 
const errors = validateResult(req);
 if(!errors.isEmpty()){
  return res.status(400).json({
    errors: errors.array() });
}

// Call your requests
const { email, password } = req.body;

try {

 // Check if user exists
 let user = await User.findOne({ email });
 
 if (!user) {
  return res.status(400).json({ errors: [{ 
   msg: 'Invalid Credentials' }] });
}
  
  // Verify if password matches
  const isMatch = await bcrypt.compare(
   password, user.password
);
  if(!isMatch) {
   return res.status(400)
   .json({ errors: [{ msg: 'Invalid Credentials' }] });
}


  //Implementing JSONWEBTOKEN
  // Declare the payload
  
  const payload = {
   user: {
     id: user.id
}
};
   jwt.sign(
     payload, 
     config.get('jwtSecret'),
     { expiresIn: 3600 },
     (err, token) => {
       if (err) throw err;
       res.json({ token });
}    
);
} catch(err) {
   console.error(err.message);
   res.status(500).send('Server error');
}
});
